/**
 * This is the route file that deals with image and post processing. 
 * It uses the Amazon Rekognition API on the US-east-2 server. 
 */

// express setup
const express = require('express');
const router = express.Router();

// AWS setup
// const {
//   RekognitionClient,
//   DetectLabelsCommand,
// } = require("@aws-sdk/client-rekognition");
// const {
//   s3Client
// } = require('../modules/s3Client.js')
// const {
//   CreateBucketCommand
// } = require("@aws-sdk/client-s3")

let image =
  ``

// CORS setup
router.use((req, res, next) => {
  // res.setHeader('Access-Control-Allow-Origin', 'https://unsplash-clone-dh.netlify.app');
  res.setHeader('Access-Control-Allow-Origin', 'http://localhost:3000');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');
  res.setHeader("Access-Control-Allow-Headers", "Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With")
  next()
})


router.get('/', (req, res) => {
  res.send("This is the server API root handler!")
  console.log(req)
});

let variable;
async function processImage(base64String) {
  // let imageBytes = new ArrayBuffer(base64String.length)
  // let ua = new Uint8Array(imageBytes);
  // for (var i = 0; i < base64String.length; i++) {
  //   ua[i] = base64String.charCodeAt(i);
  // }
  // const client = new RekognitionClient({
  //   region: process.env.AWS_REGION
  // });

  // const params = {
  //   "Image": {
  //     "Bytes": ua
  //   },
  //   "MaxLabels": 3,
  //   "MaxConfidence": 60
  // };
  // const command = new DetectLabelsCommand(params)

  // let awsResponse = await client.send(command)
  //   .then((response) => {
  //     res.send(response)
  //     console.log(response)
  //   })
  //   .catch((error) => {
  //     throw error
  //   })
  // console.log(awsResponse) 

}

router.route('/image')
  .get(async (req, res) => {
    const {
      CreateBucketCommand,
      DeleteBucketCommand,
      ListObjectsCommand,
      PutObjectCommand
    } = require("@aws-sdk/client-s3")
    const {
      s3Client
    } = require("../modules/s3Client.js")

    const bucketParams = {
      Bucket: "danialhasanbucket"
    };

    try {
      const data = await s3Client.send(new ListObjectsCommand(bucketParams));
      console.log("Success", data.Location);
      return data;
    } catch (err) {
      console.log("Error", err);
    }

  })
// .post((req, res) => {
//   res.send("Image post request received")
// })

module.exports = router;